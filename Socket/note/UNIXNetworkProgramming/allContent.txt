第一章 简介
    1.1 概述
    1.2 一个简单的时间获取客户端程序
    1.3 协议无关性
    1.4 错误处理：包裹函数
    1.5 一个简单的时间获取服务器程序
    1.6 本书中客户/服务器程序实例索引表
    1.7 OSI模型
    1.8 BSD网络支持历史
    1.9 测试用网络及主机
    1.10 Unix标准
    1.11 64位体系结构
    1.12 小节
    习题
第二章 传输层：TCP、UDP和SCTP
    2.1 概述
    2.2 总图
    2.3 用户数据报协议(UDP)
    2.4 传输控制协议(TCP)
    2.5 流控制传输协议(SCTP)
    2.6 TCP连接的建立和终止
    2.7 TIME_WAIT状态
    2.8 SCTP关联的建立和终止
    2.9 端口号
    2.10 TCP端口号和并发服务器
    2.11 缓冲区大小及限制
    2.12 标准因特网服务
    2.13 常见因特网应用的协议使用
    2.14 小节
    习题
第三章 套接字编程简介
    3.1 概述
    3.2 套接字地址结构
    3.3 值-结果参数
    3.4 字节排序函数
    3.5 字节操纵函数
    3.6 inet_aton、inet_addr和inet_ntoa函数
    3.7 inet_pton和inet_ntop函数
    3.8 sock_ntop和相关函数
    3.9 readn、writen和readline函数
    3.10 小节
    习题
第四章 基本TCP套接字编程
    4.1 概述
    4.2 socket函数
    4.3 connect函数
    4.4 bind函数
    4.5 listen函数
    4.6 accept函数
    4.7 fork和exec函数
    4.8 并发服务器
    4.9 close函数
    4.10 getsockname和getpeername函数
    4.11 小节
    习题
第五章 TCP客户/服务器程序实例
    5.1 概述
    5.2 TCP回射服务器程序：main函数
    5.3 TCP回射服务器程序：str_echo函数
    5.4 TCP回射客户程序：main函数
    5.5 TCP回射客户程序：str_cli函数
    5.6 正常启动
    5.7 正常终止
    5.8 POSIX信号处理
    5.9 处理SIGCHLD信号
    5.10 wait和waitpid函数
    5.11 accept返回前连接终止
    5.12 服务器进程终止
    5.13 SIGPIPE信号
    5.14 服务器主机崩溃
    5.15 服务器主机崩溃后重启
    5.16 服务器主机关机
    5.17 TCP程序例子小节
    5.18 数据格式
    5.19 小节
    习题
第六章 I/O复用：select和poll函数
    6.1 概述
    6.2 I/O模型
    6.3 select函数
    6.4 str_cli函数(修订版)
    6.5 批量输入
    6.6 shutdown函数
    6.7 str_cli函数(再修订版)
    6.8 TCP回射服务器程序(修订版)
    6.9 pselect函数
    6.10 poll函数
    6.11 TCP回射服务器程序(再修订版)
    6.12 小节
    习题
第七章 套接字选项
    7.1 概述
    7.2 getsockopt和setsockopt函数
    7.3 检查选项是否支持并获取默认值
    7.4 套接字状态
    7.5 通用套接字选项
    7.6 IPv4套接字选项
    7.7 ICMPv6套接字选项
    7.8 IPv6套接字选项
    7.9 TCP套接字选项
    7.10 SCTP套接字选项
    7.11 fcntl函数
    7.12 小节
    习题
第八章 基本UDP套接字编程
    8.1 概述
    8.2 recvfrom和sendto函数
    8.3 UDP回射服务器程序：main函数
    8.4 UDP回射服务器程序：dg_echo函数
    8.5 UDP回射客户程序：main函数
    8.6 UDP回射客户程序：dg_cli函数
    8.7 数据报的丢失
    8.8 验证接收到的响应
    8.9 服务器进程未运行
    8.10 UDP程序例子小节
    8.11 UDP的connect函数
    8.12 dg_cli函数(修订版)
    8.13 UDP缺乏流量控制
    8.14 UDP中的外出接口的确定
    8.15 使用select函数的TCP和UDP回射服务器程序
    8.16 小节
    习题
第九章 基本SCTP套接字编程
    9.1 概述
    9.2 接口模型
    9.3 sctp_bindx函数
    9.4 sctp_connectx函数
    9.5 sctp_getpaddrs函数
    9.6 sctp_freepaddrs函数
    9.7 sctp_getladdrs函数
    9.8 sctp_freeladdrs函数
    9.9 sctp_sendmsg函数
    9.10 sctp_recvmsg函数
    9.11 sctp_opt_info函数
    9.12 sctp_peeloff函数
    9.13 shutdown函数
    9.14 通知
    9.15 小节
    习题
第十章 SCTP客户/服务器程序例子
    10.1 概述
    10.2 SCTP——到多式流分回射服务器程序：main函数
    10.3 SCTP——到多式流分回射客户程序：main函数
    10.4 SCTP流分回射客户程序：sctpstr_cli函数
    10.5 探究头端阻塞
    10.6 控制流的数目
    10.7 控制终结
    10.8 小节
    习题
第十一章 名字与地址转换
    11.1 概述
    11.2 域名系统
    11.3 gethostbyname函数
    11.4 gethostbyaddr函数
    11.5 getservbyname和getservbyport函数
    11.6 getaddrinfo函数
    11.7 gai_strerror函数
    11.8 freeaddrinfo函数
    11.9 getaddrinfo函数：IPv6
    11.10 getaddrinfo函数：例子
    11.11 host_serv函数
    11.12 tcp_connect函数
    11.13 tcp_listen函数
    11.14 udp_client函数
    11.15 udp_connect函数
    11.16 adp_server函数
    11.17 getnameinfo函数
    11.18 可重入函数
    11.19 gethostbyname_r和gethostbyaddr_r函数
    11.20 作废的IPv6地址解析函数
    11.21 其他网络相关信息
    11.22 小节
    习题
第十二章 IPv4与Ipv6的互操作性
    12.1 概述
    12.2 IPv4客户与IPv6服务器
    12.3 IPv6客户与IPv4服务器
    12.4 IPv6地址测试宏
    12.5 源代码可移植性
    12.6 小节
    习题
第十三章 守护进程和inetd超级服务器
    13.1 概述
    13.2 syslogd守护进程
    13.3 syslog函数
    13.4 daemon_init函数
    13.5 inetd守护进程
    13.6 daemon_inetd函数
    13.7 小节
    习题
第十四章 高级I/O函数
    14.1 概述
    14.2 套接字超时
    14.3 recv和send函数
    14.4 readv和writev函数
    14.5 recvmsg和sendmsg函数
    14.6 辅助数据
    14.7 排队的数据量
    14.8 套接字和标准I/O
    14.9 高级轮询技术
    14.10 T/TCP：事务目的TCP
    14.11 小节
    习题
第十五章 Unix域协议
    15.1 概述
    15.2 Unix域套接字地址结构
    15.3 socketpair函数
    15.4 套接字函数
    15.5 Unix域字节流客户/服务器程序
    15.6 Unix域数据报客户/服务器程序
    15.7 描述符传递
    15.8 接受发送者的凭证
    15.9 小节
    习题
第十六章 非阻塞I/O
    16.1 概述
    16.2 非阻塞读和写：str_cli函数(修订版)
    16.3 非阻塞connect
    16.4 非阻塞connect：时间获取客户程序
    16.5 非阻塞connect：Web客户程序
    16.6 非阻塞accept
    16.7 小节
    习题
第十七章 ioctl操作
    17.1 概述
    17.2 ioctl函数
    17.3 套接字操作
    17.4 文件操作
    17.5 接口配置
    17.6 get_ifi_info函数
    17.7 接口操作
    17.8 ARP高速缓存操作
    17.9 路由表操作
    17.10 小节
    习题
第十八章 路由套接字
    18.1 概述
    18.2 数据链路套接字地址结构
    18.3 读和写
    18.4 sysctl操作
    18.5 get_ifi_info函数
    18.6 接口名字和索引函数
    18.7 小节
    习题
第十九章 密钥管理套接字
    19.1 概述
    19.2 读和写
    19.3 倾泻安全关联数据库
    19.4 创建静态安全关联
    19.5 动态维护安全关联
    19.6 小节
    习题
第二十章 广播
    20.1 概述
    20.2 广播地址
    20.3 单播和广播的比较
    20.4 使用广播的dg_cli函数
    20.5 竞争状态
    20.6 小节
    习题
第二十一章 多播
    21.1 概述
    21.2 多播地址
    21.3 局域网上的多播和广播的比较
    21.4 广域网上的多播
    21.5 源特定多播
    21.6 多播套接字选项
    21.7 mcast_join和相关函数
    21.8 使用多播的dg_cli函数
    21.9 接受IP多播基础设施会话声明
    21.10 发送和接受
    21.11 SNTP：简单网络时间协议
    21.12 小节
    习题
第二十二章 高级UDP套接字编程
    22.1 概述
    22.2 接受标志、目的IP地址和接口索引
    22.3 数据报截断
    22.4 何时用UDP代替TCP
    22.5 给UDP应用增加可靠性
    22.6 捆绑接口地址
    22.7 并发UDP服务器
    22.8 IPv6分组信息
    22.9 IPv6路径MTU控制
    22.10 小节
    习题
第二十三章 高级SCTP套接字编程
    23.1 概述
    23.2 自动关闭的一到多式服务器程序
    23.3 部分递送
    23.4 通知
    23.5 无序的数据
    23.6 捆绑地址子集
    23.7 确定对端和本端地址信息
    23.8 给定IP地址找出关联ID
    23.9 心搏和地址不可达
    23.10 关联剥离
    23.11 定时控制
    23.12 何时改用SCTP代替TCP
    23.13 小节
    习题
第二十四章 带外数据
    24.1 概述
    24.2 TCP带外数据
    24.3 sockatmark函数
    24.4 TCP带外数据小节
    24.5 客户/服务器心搏函数
    24.6 小节
    习题
第二十五章 信号驱动式I/O
    25.1 概述
    25.2 套接字的信号驱动式I/O
    25.3 使用SIGIO的UDP回射服务器程序
    25.4 小节
    习题
第二十六章
    26.1 概述
    26.2 基本线程函数：创建和终止
    26.3 使用线程的str_cli函数
    26.4 使用线程的TCP回射服务器程序
    26.5 线程特定数据
    26.6 Web客户与同时连接
    26.7 互斥锁
    26.8 条件变量
    26.9 Web客户与同时连接(续)
    26.10 小节
    习题
第二十七章 IP选项
    27.1 概述
    27.2 IPv4选项
    27.3 IPv4源路径选项
    27.4 IPv6扩展首部
    27.5 IPv6步跳选项和目的地选项
    27.6 IPv6路由首部
    27.7 IPv6粘附选项
    27.8 历史性IPv6高级API
    27.9 小节
    习题
第二十八章 原始套接字
    28.1 概述
    28.2 原始套接字创建
    28.3 原始套接字输出
    28.4 原始套接字输入
    28.5 ping程序
    28.6 traceroute程序
    28.7 一个ICMP消息守护程序
    28.8 小节
    习题
第二十九章 数据链路访问
    29.1 概述
    29.2 BPF：BSD分组过滤器
    29.3 DLPI：数据链路提供者接口
    29.4 Linux：SOCK_PACKET和PF_PACKET
    29.5 libpcap：分组捕获函数库
    29.6 libnet：分组构造和输出函数库
    29.7 检查UDP的校验和字段
    29.8 小节
    习题
第三十章 客户/服务器程序设计范式
    30.1 概述
    30.2 TCP客户程序设计范式
    30.3 TCP测试用客户程序
    30.4 TCP迭代服务器程序
    30.5 TCP并发服务器程序，每个客户一个子进程
    30.6 TCP预先派生子进程服务器程序，accept无上锁保护
    30.7 TCP预先派生子进程服务器程序，accept使用文件上锁保护
    30.8 TCP预先派生子进程服务器程序，accept使用线程上锁保护
    30.9 TCP预先派生子进程服务器程序，传递描述符
    30.10 TCP并发服务器程序，每个客户一个线程
    30.11 TCP预先创建线程服务器程序，每个线程各自accept
    30.12 TCP预先创建线程服务器程序，主线程统一accept
    30.13 小节
    习题
第三十一章 流
    31.1 概述
    31.2 概貌
    31.3 getmsg和putmsg函数
    31.4 getpmsg和putpmsg函数
    31.5 ioctl函数
    31.6 TPI：传输提供者接口
    31.7 小节
    习题



第一章 简介

    1.1 概述
        TCP(Transmission Control Protocol);
        IP(Internet Protocol)。
        要编写通信程序，首先确定通信所用的协议(protocol)
        在深入设计一个协议的细节之前，应该从高层次决断通信由那个程序发起一个相应在何时产生。
        TCP/IP协议族，也称网际协议族。
        图1-1 CS使用TCP在同一以太网中通信
        局域网(local area network,LAN)
        广域网(wide area network, WAN)
        图1-2 处于不同局域网的客户主机和服务器主机通过广域网连接

    1.2 一个简单的时间获取客户端程序
        代码参见github/Socket/develop/Socket/first-chapter/daytimetcpli.c
        安装xinetd              sudo apt-get install xinetd
        编译：gcc daytimetcpcli.c -o daytimetcpcli -lunp                 #lunp为静态库中的函数
        执行：./daytimetcpcli
        结果：17 FEB 2019 21:22:28 CST
        注：tcp本身并不提供记录结束标志

    1.3 协议无关性
        代码参见github/Socket/develop/Socket/first-chapter/daytimetcpliv6.c
        这是与IPv6相关的代码，更好的做法是编写与协议无关的程序，在第十一章将给出与协议无关的代码

    1.4 错误处理：包裹函数
        任何程序都必须检查每个函数调用是否返回错误。个别情况下，某些函数返回错误时，我们想做的并非简单的终止程序的运行。
        可以定义包裹函数来缩短程序，每个包裹函数完成实际的函数调用，检查返回值，并在发生错误时终止进程。
        int Socket(int family, int type, int protocol)
        {
            int n;
            if( (n = socket(family,type,protocol))< 0 )
                err-sys("socket error!")
            return (n);
        }
        errno值：
            只要一个Unix函数中有错误发生，全局变量errno就被置为一个指明该错误类型的正直，函数本身则通常返回-1。
            errno的值只在函数发生错误时设置，如果函数不返回错误，errno的值就没有意义。errno的所有正数错误值都是常值，具有以"E"开头的全大写字母名字，并通常在<sys/errno.h>头文件中定义，值0不表示任何错误。
            在全局变量中存放errno值对于共享所有全局变量的多个线程不适合。

    1.5 一个简单的时间获取服务器程序
       代码参见github/Socket/develop/Socket/first_chapter/daytimetcpscr.c 

    1.6 本书中客户/服务器程序实例索引表

    1.7 OSI模型
        图1-3OSI模型和网际协议族中的各层
        图1-3中TCP与UDP之间留有空隙，表明网络应用绕过传输层直接使用IPv4或IPv6是可能的，这就是所谓的原始套接字。

    1.8 BSD网络支持历史
        图1-4各种BSD版本的历史

    1.9 测试用网络及主机
        图1-5示例用网络和主机
        网络拓扑：
            netstat -i提供网络接口的信息。-n标志输出数值地址。-r展示路由表。
                例：netstat -ni
                    netstat -nr
            ifconfig [接口]获得每个接口的详细信息。-a用于输出所有以配置接口的信息
            ping

    1.10 Unix标准
        POSIX       System V        Berkeley

    1.11 64位体系结构
        现有32位Unix系统上共同的边城模型称为ILP32模型，表示整数(I)、长整数(L)和指针(P)都表示32位
        64位Unix系统上变得最为流行的模型称为LP64模型，表示只有长整数(L)和指针(P)占用64位
        ANSI C创造了size_t数据类型，maclloc、read、write等都有它的影子，在32位系统上它是一个32位值，在64位系统上它是64位值

    1.12 小节
        了解TCP/IP协议和OSI模型
        掌握以上两个客户端和服务器程序
        掌握网络拓扑的命令

    习题
        1 按照1.9小节的命令找出自己的网络拓扑信息
        2 运行以上两个小程序，每次以不同IP地址作为命令行参数
        3 把客户端程序socket的第一个参数改为9999,编译并运行这个程序，查看结果。找出对应于所输出的errno值，如何找出关于这个错误的更多信息。
        4 修改客户端程序的while循环，加入一个计数器，累计read返回大于0的次数，在终止前输出这个计数器值，编译并运行修改过的程序。
        5 按照下述步骤修改服务器程序，首先，把赋予sin_port的端口号从13改为9999,然后把write的单一调用改为循环调用，每次写出结果字符串的一个字节，编译修改后的服务器程序并在后台启动执行，接着修改前一道习题中的客户端程序(他在终止前输出计数器值)，把赋予sin_port的端口号从13改为9999,启动客户程序，指定运行后的服务器程序的主机的IP地址作为命令行参数，查看客户程序计数器的值。

第二章 传输层：TCP、UDP和SCTP

    2.1 概述
        TCP：复杂可靠的字节流协议
        UDP：简单的不可靠的数据报协议
        SCTP：一种较新的协议，与TCP类似，也是一个可靠的传输协议，但是它还提供了消息边界、传输级别多宿支持以及将头端阻塞减少到最小的一种方法

    2.2 总图
        图2-1TCP/IP协议概况
        IPv4：网际协议版本4
        IPv6：网际协议版本6
        TCP：传输控制协议，TCP是一个面向连接的协议，为用户进程提供可靠的全双工字节流，TCP套接字是一种流套接字
        UDP：用户数据报协议，是一个无连接协议。UDP套接字是一种数据报套接字，UDP数据报不能保证最终到达他们的目的地
        SCTP：流控制传输协议，提供可靠全双工关联的面向连接的协议，SCTP是多宿的从而每个关联的两端均涉及一组IP地址和一个端口号，SCTP提供消息服务，也就是维护来自应用层的记录边界
        ICMP：网际控制消息协议，处理在路由器和主机之间流通的错误和控制消息
        IGMP：网际组管理协议，用于多播，在IPv4中可选
        ARP：地址解析协议把一个IPv4地址映射成一个硬件地址
        RARP：反向地址解析协议，把一个硬件地址映射成一个IPv4地址
        ICMPv6：网际控制消息协议版本6
        BPF：BSD分组过滤器，该接口提供对于数据链路层的访问能力
        DLPI：数据链路提供者接口，，该接口也提供对于数据链路层的访问能力

    2.3 用户数据报协议(UDP)
        应用进程往一个UDP套接字写入一个消息，该消息随后被封装(encapsulating)到一个UDP数据报，该UDP数据报进而又被封装到一个IP数据报，然后发送到目的地。
        UDP不保证UDP数据报回到达其最终目的地，不保证各个数据报的先后顺序夸网络后保持不变，也不保证每个数据报只到达一次。
        解决方案：来自对端的确认、本端超时和重传
    2.4 传输控制协议(TCP)
        首先，TCP提供客户与服务器之间的连接，TCP客户端先与某个给定服务器建立一个连接，在跨该连接与那个服务器交换数据，然后终止这个连接。
        其次，TCP还提供了可靠性，当TCP向另一端发送数据时，它要求对端返回一个确认，如果没有收到确认，TCP就自动重传数据并等待更长时间。在数次重传失败后，TCP才放弃。

        TCP含有用于动态估算客户和服务器之间的往返时间的算法，以便它知道等待一个确认需要多少时间。
        TCP通过给其中每个字节关联一个序列号对所发送的数据进行排序

        再次，TCP提供流量控制，TCP总是告知对端在任何时刻它一次能够从对端接受多少字节的数据，这称为通告窗口，在任何时刻，该窗口指出接受缓冲区中当前可用的空间量，从而确保发送端发送的数据不会使接受缓冲区溢出。该窗口时刻动态变化：当接受到来自发送端的数据时，窗口大小就减小，但是当接受端应用从缓冲区中读取数据时，窗口大小就增大。通告窗口减小到0是有可能的：当TCP对应某个套接字的接受缓冲区已满，导致它必须等待应用从该缓冲区读取数据时，方能从对端在接受数据。
        最后，TCP是全双工的，也就是说在同一个连接上应用可以在任何时刻在进出两个方向上即发送数据也接受数据。

    2.5 流控制传输协议(SCTP)
        SCTP在客户和服务器之间提供了关联(association)，并像TCP那样给应用提供可靠性、排序、流量控制以及全双工的数据传送
        与TCP不同的是，SCTP是面向消息的，，它提供各个记录的按序递送服务，与UDP一样，由发送端写入的每条记录的长度随数据一道传递给接受端应用。
        SCTP能够在所连接的端点之间提供多个流，每个流各自可靠的按序递送消息。一个流上某个消息的丢失不会阻塞同一关联其他流上消息的投递。
        SCTP还提供多宿性，使得单个SCTP端点能够支持多个IP地址。该特性可以增强应对网络故障的健壮性。

    2.6 TCP连接的建立和终止
        2.6.1 三路握手
            图2-2 TCP的三路握手
        2.6.2 TCP选项
            每一个SYN可以含有多个TCP选项。常用选项：
                > MSS选项：发送SYN的TCP一端使用本选项通告对端它的最大分节大小即MMS，也就是它在本连接的每个TCP分节中愿意接受的最大数据量。发送端TCP使用接受端的MMS值作为所发送分节的最大大小。使用TCP_MAXSEG套接字选项可以提取和设置这个TCP选项。
                > 窗口规模选项。 这个选项指定TCP首部中的通告窗口必须扩大(即左移)的位数(0～14)，因此所提供的最大窗口接近1GB(65536 X 2的14次方)。在一个TCP连接上使用窗口规模的前提是它的两个端系统必须都支持这个选项。
                > 时间戳选项。可以防止由而复现的分组可能造成的数据损坏。
        2.6.3 TCP连接终止
            TCP建立一个连接需要3个分节，终止一个连接则需要4个分节。
            图2-4TCP状态转换图
    2.7 TIME_WAIT状态
        MSL(maximnum segment lifetime)：最长分节生命期，任何IP数据报能够在因特网中存活的最长时间，每个数据报含有一个称为跳线(hop limit)的8位字段,它的最大值是255,跳数限制并不是真正的时间限制，只是假设。
        分组在网络中"迷途"通常是路由异常的结果。路由崩溃或两个路由之间的链路断开时，路由协议需花费数秒钟的时间才能稳定并找出另一条通路。这段时间内可能发生路由循环，分组也可能就此陷入这样的循环。在迷途期间，发送端超时并重传该分组，而重传的分组却通过某条候选路径到达最终目的。然而不久后路由循环修复，早先迷失在这个循环中的分组最终也被送到目的地，这个原来的分组称为迷途的重复分组或漫游的重复分组。
        TIME_WAIT状态存在的两个理由：
        1 可靠的实现TCP全双工连接的终止。
        2 允许老的重复分节在网络中消失。
    2.8 SCTP关联的建立和终止
        2.8.1 四路握手
            图2-6SCTP的四路握手
        2.8.2 关联终止
            图2-7SCTP关联关闭时的分组交换
        2.8.3 SCTP状态转换图
            图2-8SCTP状态转换图
        2.8.4 观察分组

    2.9 端口号
    2.10 TCP端口号和并发服务器
    2.11 缓冲区大小及限制
    2.12 标准因特网服务
    2.13 常见因特网应用的协议使用
    2.14 小节
    习题
第三章 套接字编程简介
    3.1 概述
    3.2 套接字地址结构
    3.3 值-结果参数
    3.4 字节排序函数
    3.5 字节操纵函数
    3.6 inet_aton、inet_addr和inet_ntoa函数
    3.7 inet_pton和inet_ntop函数
    3.8 sock_ntop和相关函数
    3.9 readn、writen和readline函数
    3.10 小节
    习题
第四章 基本TCP套接字编程
    4.1 概述
    4.2 socket函数
    4.3 connect函数
    4.4 bind函数
    4.5 listen函数
    4.6 accept函数
    4.7 fork和exec函数
    4.8 并发服务器
    4.9 close函数
    4.10 getsockname和getpeername函数
    4.11 小节
    习题
第五章 TCP客户/服务器程序实例
    5.1 概述
    5.2 TCP回射服务器程序：main函数
    5.3 TCP回射服务器程序：str_echo函数
    5.4 TCP回射客户程序：main函数
    5.5 TCP回射客户程序：str_cli函数
    5.6 正常启动
    5.7 正常终止
    5.8 POSIX信号处理
    5.9 处理SIGCHLD信号
    5.10 wait和waitpid函数
    5.11 accept返回前连接终止
    5.12 服务器进程终止
    5.13 SIGPIPE信号
    5.14 服务器主机崩溃
    5.15 服务器主机崩溃后重启
    5.16 服务器主机关机
    5.17 TCP程序例子小节
    5.18 数据格式
    5.19 小节
    习题
第六章 I/O复用：select和poll函数
    6.1 概述
    6.2 I/O模型
    6.3 select函数
    6.4 str_cli函数(修订版)
    6.5 批量输入
    6.6 shutdown函数
    6.7 str_cli函数(再修订版)
    6.8 TCP回射服务器程序(修订版)
    6.9 pselect函数
    6.10 poll函数
    6.11 TCP回射服务器程序(再修订版)
    6.12 小节
    习题
第七章 套接字选项
    7.1 概述
    7.2 getsockopt和setsockopt函数
    7.3 检查选项是否支持并获取默认值
    7.4 套接字状态
    7.5 通用套接字选项
    7.6 IPv4套接字选项
    7.7 ICMPv6套接字选项
    7.8 IPv6套接字选项
    7.9 TCP套接字选项
    7.10 SCTP套接字选项
    7.11 fcntl函数
    7.12 小节
    习题
第八章 基本UDP套接字编程
    8.1 概述
    8.2 recvfrom和sendto函数
    8.3 UDP回射服务器程序：main函数
    8.4 UDP回射服务器程序：dg_echo函数
    8.5 UDP回射客户程序：main函数
    8.6 UDP回射客户程序：dg_cli函数
    8.7 数据报的丢失
    8.8 验证接收到的响应
    8.9 服务器进程未运行
    8.10 UDP程序例子小节
    8.11 UDP的connect函数
    8.12 dg_cli函数(修订版)
    8.13 UDP缺乏流量控制
    8.14 UDP中的外出接口的确定
    8.15 使用select函数的TCP和UDP回射服务器程序
    8.16 小节
    习题
第九章 基本SCTP套接字编程
    9.1 概述
    9.2 接口模型
    9.3 sctp_bindx函数
    9.4 sctp_connectx函数
    9.5 sctp_getpaddrs函数
    9.6 sctp_freepaddrs函数
    9.7 sctp_getladdrs函数
    9.8 sctp_freeladdrs函数
    9.9 sctp_sendmsg函数
    9.10 sctp_recvmsg函数
    9.11 sctp_opt_info函数
    9.12 sctp_peeloff函数
    9.13 shutdown函数
    9.14 通知
    9.15 小节
    习题
第十章 SCTP客户/服务器程序例子
    10.1 概述
    10.2 SCTP——到多式流分回射服务器程序：main函数
    10.3 SCTP——到多式流分回射客户程序：main函数
    10.4 SCTP流分回射客户程序：sctpstr_cli函数
    10.5 探究头端阻塞
    10.6 控制流的数目
    10.7 控制终结
    10.8 小节
    习题
第十一章 名字与地址转换
    11.1 概述
    11.2 域名系统
    11.3 gethostbyname函数
    11.4 gethostbyaddr函数
    11.5 getservbyname和getservbyport函数
    11.6 getaddrinfo函数
    11.7 gai_strerror函数
    11.8 freeaddrinfo函数
    11.9 getaddrinfo函数：IPv6
    11.10 getaddrinfo函数：例子
    11.11 host_serv函数
    11.12 tcp_connect函数
    11.13 tcp_listen函数
    11.14 udp_client函数
    11.15 udp_connect函数
    11.16 adp_server函数
    11.17 getnameinfo函数
    11.18 可重入函数
    11.19 gethostbyname_r和gethostbyaddr_r函数
    11.20 作废的IPv6地址解析函数
    11.21 其他网络相关信息
    11.22 小节
    习题
第十二章 IPv4与Ipv6的互操作性
    12.1 概述
    12.2 IPv4客户与IPv6服务器
    12.3 IPv6客户与IPv4服务器
    12.4 IPv6地址测试宏
    12.5 源代码可移植性
    12.6 小节
    习题
第十三章 守护进程和inetd超级服务器
    13.1 概述
    13.2 syslogd守护进程
    13.3 syslog函数
    13.4 daemon_init函数
    13.5 inetd守护进程
    13.6 daemon_inetd函数
    13.7 小节
    习题
第十四章 高级I/O函数
    14.1 概述
    14.2 套接字超时
    14.3 recv和send函数
    14.4 readv和writev函数
    14.5 recvmsg和sendmsg函数
    14.6 辅助数据
    14.7 排队的数据量
    14.8 套接字和标准I/O
    14.9 高级轮询技术
    14.10 T/TCP：事务目的TCP
    14.11 小节
    习题
第十五章 Unix域协议
    15.1 概述
    15.2 Unix域套接字地址结构
    15.3 socketpair函数
    15.4 套接字函数
    15.5 Unix域字节流客户/服务器程序
    15.6 Unix域数据报客户/服务器程序
    15.7 描述符传递
    15.8 接受发送者的凭证
    15.9 小节
    习题
第十六章 非阻塞I/O
    16.1 概述
    16.2 非阻塞读和写：str_cli函数(修订版)
    16.3 非阻塞connect
    16.4 非阻塞connect：时间获取客户程序
    16.5 非阻塞connect：Web客户程序
    16.6 非阻塞accept
    16.7 小节
    习题
第十七章 ioctl操作
    17.1 概述
    17.2 ioctl函数
    17.3 套接字操作
    17.4 文件操作
    17.5 接口配置
    17.6 get_ifi_info函数
    17.7 接口操作
    17.8 ARP高速缓存操作
    17.9 路由表操作
    17.10 小节
    习题
第十八章 路由套接字
    18.1 概述
    18.2 数据链路套接字地址结构
    18.3 读和写
    18.4 sysctl操作
    18.5 get_ifi_info函数
    18.6 接口名字和索引函数
    18.7 小节
    习题
第十九章 密钥管理套接字
    19.1 概述
    19.2 读和写
    19.3 倾泻安全关联数据库
    19.4 创建静态安全关联
    19.5 动态维护安全关联
    19.6 小节
    习题
第二十章 广播
    20.1 概述
    20.2 广播地址
    20.3 单播和广播的比较
    20.4 使用广播的dg_cli函数
    20.5 竞争状态
    20.6 小节
    习题
第二十一章 多播
    21.1 概述
    21.2 多播地址
    21.3 局域网上的多播和广播的比较
    21.4 广域网上的多播
    21.5 源特定多播
    21.6 多播套接字选项
    21.7 mcast_join和相关函数
    21.8 使用多播的dg_cli函数
    21.9 接受IP多播基础设施会话声明
    21.10 发送和接受
    21.11 SNTP：简单网络时间协议
    21.12 小节
    习题
第二十二章 高级UDP套接字编程
    22.1 概述
    22.2 接受标志、目的IP地址和接口索引
    22.3 数据报截断
    22.4 何时用UDP代替TCP
    22.5 给UDP应用增加可靠性
    22.6 捆绑接口地址
    22.7 并发UDP服务器
    22.8 IPv6分组信息
    22.9 IPv6路径MTU控制
    22.10 小节
    习题
第二十三章 高级SCTP套接字编程
    23.1 概述
    23.2 自动关闭的一到多式服务器程序
    23.3 部分递送
    23.4 通知
    23.5 无序的数据
    23.6 捆绑地址子集
    23.7 确定对端和本端地址信息
    23.8 给定IP地址找出关联ID
    23.9 心搏和地址不可达
    23.10 关联剥离
    23.11 定时控制
    23.12 何时改用SCTP代替TCP
    23.13 小节
    习题
第二十四章 带外数据
    24.1 概述
    24.2 TCP带外数据
    24.3 sockatmark函数
    24.4 TCP带外数据小节
    24.5 客户/服务器心搏函数
    24.6 小节
    习题
第二十五章 信号驱动式I/O
    25.1 概述
    25.2 套接字的信号驱动式I/O
    25.3 使用SIGIO的UDP回射服务器程序
    25.4 小节
    习题
第二十六章
    26.1 概述
    26.2 基本线程函数：创建和终止
    26.3 使用线程的str_cli函数
    26.4 使用线程的TCP回射服务器程序
    26.5 线程特定数据
    26.6 Web客户与同时连接
    26.7 互斥锁
    26.8 条件变量
    26.9 Web客户与同时连接(续)
    26.10 小节
    习题
第二十七章 IP选项
    27.1 概述
    27.2 IPv4选项
    27.3 IPv4源路径选项
    27.4 IPv6扩展首部
    27.5 IPv6步跳选项和目的地选项
    27.6 IPv6路由首部
    27.7 IPv6粘附选项
    27.8 历史性IPv6高级API
    27.9 小节
    习题
第二十八章 原始套接字
    28.1 概述
    28.2 原始套接字创建
    28.3 原始套接字输出
    28.4 原始套接字输入
    28.5 ping程序
    28.6 traceroute程序
    28.7 一个ICMP消息守护程序
    28.8 小节
    习题
第二十九章 数据链路访问
    29.1 概述
    29.2 BPF：BSD分组过滤器
    29.3 DLPI：数据链路提供者接口
    29.4 Linux：SOCK_PACKET和PF_PACKET
    29.5 libpcap：分组捕获函数库
    29.6 libnet：分组构造和输出函数库
    29.7 检查UDP的校验和字段
    29.8 小节
    习题
第三十章 客户/服务器程序设计范式
    30.1 概述
    30.2 TCP客户程序设计范式
    30.3 TCP测试用客户程序
    30.4 TCP迭代服务器程序
    30.5 TCP并发服务器程序，每个客户一个子进程
    30.6 TCP预先派生子进程服务器程序，accept无上锁保护
    30.7 TCP预先派生子进程服务器程序，accept使用文件上锁保护
    30.8 TCP预先派生子进程服务器程序，accept使用线程上锁保护
    30.9 TCP预先派生子进程服务器程序，传递描述符
    30.10 TCP并发服务器程序，每个客户一个线程
    30.11 TCP预先创建线程服务器程序，每个线程各自accept
    30.12 TCP预先创建线程服务器程序，主线程统一accept
    30.13 小节
    习题
第三十一章 流
    31.1 概述
    31.2 概貌
    31.3 getmsg和putmsg函数
    31.4 getpmsg和putpmsg函数
    31.5 ioctl函数
    31.6 TPI：传输提供者接口
    31.7 小节
    习题

