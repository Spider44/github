<svg xmlns:ev="http://www.w3.org/2001/xml-events" height="804" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="1132" viewBox="0 0 1132 804"><style type="text/css"><![CDATA[
.st6 {fill:#002060;font-family:Abyssinica SIL;font-size:14pt}
.st4 {fill:#00b050;font-family:宋体;font-size:10pt}
.st2 {fill:#00b0f0;font-family:宋体;font-size:14pt}
.st5 {fill:#1f6391;font-family:宋体;font-size:10pt}
.st3 {fill:#1f6391;font-family:宋体;font-size:14pt}
.st1 {fill:#ffffff;font-family:宋体;font-size:20pt}
]]></style><defs/><g transform="translate(5,5)" id="page1"><rect y="0" fill="#ffffff" stroke="#808080" height="794" x="0" width="1123"/><g><g transform="translate(0,-0)"><g><path fill="#527294" d="M0,0L1122.5,0L1082.5,40.8L39.1,40.8L0,0z" stroke="#527294" id="shape1"/><g transform="translate(291.86,0)" id="shape2"><path fill="#3498db" d="M0,0L538.8,0L478.1,56.7L60.7,56.7L0,0z" stroke="#3498db"/><text class="st1"><tspan y="36.8" x="106.4">TCP连接关闭时的分组交换</tspan></text></g></g><g transform="translate(0,765.35)"><path fill="#527294" d="M38.2,0L1084.4,0L1122.5,17L0,17L38.2,0z" stroke="#527294" transform="translate(0,11.34)" id="shape3"/></g></g><g transform="translate(43.26,63.99)" id="shape4"><text class="st2"><tspan y="33.3" x="4.2">1.某个应用程序首先调用close，我们称为该端执行主动关闭。该端的TCP于是发送一个  FIN分节，表示数据发送完毕</tspan><tspan y="55.3" x="4.2">2. 接收到这个FIN分节的对端执行被动关闭，这个FIN由TCP确认，他的接受也作为一个  文件结束符传递给接受端的应用</tspan><tspan y="77.3" x="4.2">进程(放在以排队等候该应用进程接受的任何其他数据之后)，因为FIN的接受意味着接受端应用进程在相应连接上在无额外</tspan><tspan y="99.3" x="4.2">数据可接受。</tspan><tspan y="121.3" x="4.2">3.一段时间后，接收到这个文件结束符的应用进程将调用close关闭它的套接字。这导致它的TCP也发送一个FIN。</tspan><tspan y="143.3" x="4.2">4.接受这个最终FIN的原发送端TCP(即执行主动关闭的那一端)确认这个FIN。</tspan><tspan y="187.3" x="4.2">某些情形下，步骤1的FIN随数据一起发送;另外，步骤2和步骤3发送的分节都出自执行被动关闭的那一端，有可能被合并成</tspan><tspan y="209.3" x="4.2">一个分节</tspan></text></g><g transform="translate(58.45,301.56)"><g><path fill="none" stroke="#236ea1" d="M0,0L371.9,0" stroke-width="2" transform="matrix(0,1,-1,0,103.1,65.6)" id="shape5"/><path fill="none" stroke="#236ea1" d="M0,0L371.9,0" stroke-width="2" transform="matrix(0,1,-1,0,353.7,68.1)" id="shape6"/><g transform="matrix(0.98,0.18,-0.18,0.98,106,116.1)" id="shape7"><path fill="none" stroke="#16a58a" d="M0,0L244.4,0" stroke-width="1.33333"/><path stroke-linecap="round" fill="#16a58a" stroke="#16a58a" d="M249.5,0L243.5,-3.5C244.1,-2.4,244.4,-1.3,244.4,0C244.4,1.3,244.1,2.4,243.5,3.5L249.5,0" stroke-width="1"/></g><g transform="matrix(-0.98,0.2,-0.2,-0.98,349.3,181.7)" id="shape8"><path fill="none" stroke="#16a58a" d="M0,0L246.3,0" stroke-width="1.33333"/><path stroke-linecap="round" fill="#16a58a" stroke="#16a58a" d="M251.4,0L245.4,-3.5C246,-2.4,246.3,-1.3,246.3,0C246.3,1.3,246,2.4,245.4,3.5L251.4,0" stroke-width="1"/></g><g transform="matrix(-0.97,0.25,-0.25,-0.97,350.3,260.8)" id="shape9"><path fill="none" stroke="#16a58a" d="M0,0L252.2,0" stroke-width="1.33333"/><path stroke-linecap="round" fill="#16a58a" stroke="#16a58a" d="M257.2,0L251.2,-3.5C251.8,-2.4,252.2,-1.3,252.2,0C252.2,1.3,251.8,2.4,251.2,3.5L257.2,0" stroke-width="1"/></g><g transform="translate(46.1,0)" id="shape10"><text class="st3"><tspan y="38" x="39.2">客户</tspan></text></g><g transform="translate(264.02,0)" id="shape11"><text class="st3"><tspan y="44.7" x="59.2">服务器</tspan></text></g><g transform="translate(336.82,92.54)" id="shape12"><text class="st4"><tspan y="51.5" x="51.4">(被动关闭)</tspan><tspan y="66.5" x="50.4">read返回0</tspan></text></g><g transform="matrix(0.98,0.2,-0.2,0.98,104.5,355.9)" id="shape13"><path fill="none" stroke="#16a58a" d="M0,0L248.2,0" stroke-width="1.33333"/><path stroke-linecap="round" fill="#16a58a" stroke="#16a58a" d="M253.3,0L247.3,-3.5C247.9,-2.4,248.2,-1.3,248.2,0C248.2,1.3,247.9,2.4,247.3,3.5L253.3,0" stroke-width="1"/></g><g transform="translate(350.31,218.74)" id="shape14"><text class="st4"><tspan y="36.3" x="33.4">close</tspan></text></g><g transform="translate(3.65,92.54)" id="shape15"><text class="st4"><tspan y="36.3" x="33.4">close</tspan></text></g><g transform="translate(-0,116.1)" id="shape16"><text class="st4"><tspan y="51.5" x="23.1">(主动关闭)</tspan></text></g></g><g transform="translate(134.85,76.1)"><g transform="matrix(0.99,0.16,-0.16,0.99,3.2,10)" id="shape17"><text class="st5"><tspan y="22.4" x="79.4">FIN M</tspan></text></g><g transform="matrix(0.99,-0.13,0.13,0.99,32.7,107.5)" id="shape18"><text class="st5"><tspan y="20.2" x="33.1">ACK M+1</tspan></text></g><g transform="matrix(0.99,-0.14,0.14,0.99,25.2,180.3)" id="shape19"><text class="st5"><tspan y="32" x="47.1">FIN N</tspan></text></g><g transform="matrix(0.99,0.16,-0.16,0.99,49.8,258.1)" id="shape20"><text class="st5"><tspan y="23.9" x="26.1">FIN N+1</tspan></text></g></g></g><g transform="translate(582.44,298.03)" id="shape21"><text class="st6"><tspan y="35" x="4.2">类似SYN，一个FIN也占一个字节的序列号空间。因此每个</tspan><tspan y="70" x="4.2">FIN的ACK确认好就是这个FIN的序列号加1</tspan><tspan y="105" x="4.2">在步骤2和3之间，从执行被动关闭一端到执行主动关闭一</tspan><tspan y="140" x="4.2">段流动数据是可能的，这称为半关闭。</tspan><tspan y="175" x="4.2">当套接字被关闭时，其所在端TCP各自发送一个FIN，图中</tspan><tspan y="210" x="4.2">指出这是由应用进程调用close而发生的，不过需要认识</tspan><tspan y="245" x="4.2">到，当一个进程无论自愿的还是非自愿的终止时，所有打</tspan><tspan y="280" x="4.2">开的描述符都会被关闭，这也导致仍然打开的任何TCP连</tspan><tspan y="315" x="4.2">接上也发出一个FIN。</tspan><tspan y="350" x="4.2">无论客户端还是服务器都可以执行主动关闭。</tspan></text></g></g></g></svg>